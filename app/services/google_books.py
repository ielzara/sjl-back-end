from typing import List
import httpx
from app.schemas.book import BookCreate
from app.core.config import settings

class GoogleBooksService:
    def __init__(self):
        self.base_url = settings.GOOGLE_BOOKS_BASE_URL
        self.api_key = settings.GOOGLE_BOOKS_API_KEY

    async def search_books_by_topics(self, topics: List[str], max_results: int = 5) -> List[BookCreate]:
        """
        Search Google Books API for books matching multiple topics/subjects.
        Args:
            topics: List of topics generated by Claude AI
            max_results: Maximum number of books to return
        Example: topics = ['civil rights', 'racial justice', 'education reform']
        """
        try:
            # Combine all topics into one search query using OR operator
            search_query = " OR ".join(f"subject:\"{topic}\"" for topic in topics)
            
            params = {
                "q": search_query,
                "maxResults": max_results,
                "printType": "books",
                "key": self.api_key,
                "orderBy": "relevance"
            }

            async with httpx.AsyncClient() as client:
                response = await client.get(self.base_url, params=params)
                response.raise_for_status()
                data = response.json()

            books = []
            for item in data.get("items", []):
                volume_info = item.get("volumeInfo", {})
                
                # Get ISBN
                isbn = None
                for identifier in volume_info.get("industryIdentifiers", []):
                    if identifier.get("type") in ["ISBN_10", "ISBN_13"]:
                        isbn = identifier.get("identifier")
                        break

                # Map to our BookCreate schema
                book = BookCreate(
                    title=volume_info.get("title", ""),
                    author=", ".join(volume_info.get("authors", [])),
                    description=volume_info.get("description", ""),
                    url=volume_info.get("previewLink", ""),
                    cover_url=volume_info.get("imageLinks", {}).get("thumbnail", ""),
                    isbn=isbn
                )
                books.append(book)

            return books

        except httpx.HTTPError as e:
            print(f"HTTP error occurred: {e}")
            return []
        except Exception as e:
            print(f"Error occurred: {e}") 
            return []

    async def search_books(self, query: str, max_results: int = 5) -> List[BookCreate]:
        """Simple search method using direct query string"""
        return await self.search_books_by_topics([query], max_results)